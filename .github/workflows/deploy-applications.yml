name: Deploy Applications

on:
  workflow_run:
    workflows: ["Deploy Infrastructure"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  DIGITALOCEAN_TOKEN: ${{ secrets.DO_ACCESS_TOKEN }}

jobs:
  deploy-backend:
    name: Deploy Backend Application
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: backend/go.sum

    - name: Setup Pulumi CLI
      uses: pulumi/actions@v4

    - name: Get infrastructure outputs
      working-directory: hosting
      run: |
        pulumi stack select dev
        echo "DROPLET1_IP=$(pulumi stack output droplet1Ip)" >> $GITHUB_ENV
        echo "DROPLET2_IP=$(pulumi stack output droplet2Ip)" >> $GITHUB_ENV
        echo "LB_IP=$(pulumi stack output loadBalancerIp)" >> $GITHUB_ENV
        echo "DO_SPACES_BUCKET=$(pulumi stack output spacesBucketName)" >> $GITHUB_ENV
        echo "DO_SPACES_ENDPOINT=$(pulumi stack output spacesBucketEndpoint)" >> $GITHUB_ENV
        echo "DO_VALKEY_HOST=$(pulumi stack output valkeyClusterHost)" >> $GITHUB_ENV
        echo "DO_VALKEY_PORT=$(pulumi stack output valkeyClusterPort)" >> $GITHUB_ENV
        echo "DO_VALKEY_URI=$(pulumi stack output valkeyClusterUri)" >> $GITHUB_ENV

    - name: Deploy backend application
      run: |
        echo "## Backend Deployment Starting" >> $GITHUB_STEP_SUMMARY
        echo "Building and deploying Go backend application..." >> $GITHUB_STEP_SUMMARY

        # Build the Go application locally
        cd backend
        go mod tidy
        GOOS=linux GOARCH=amd64 go build -o cgc-backend cmd/server/main.go

        # Create deployment archive
        tar -czf ../backend-deploy.tar.gz cgc-backend
        cd ..

        echo "✅ Backend application built and packaged" >> $GITHUB_STEP_SUMMARY
        echo "Applications deployed via droplet user-data script (full-stack on both droplets)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- Droplet 1 IP: ${{ env.DROPLET1_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- Droplet 2 IP: ${{ env.DROPLET2_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- Load Balancer IP: ${{ env.LB_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- DO Spaces Bucket: ${{ env.DO_SPACES_BUCKET }}" >> $GITHUB_STEP_SUMMARY
        echo "- DO Spaces Endpoint: ${{ env.DO_SPACES_ENDPOINT }}" >> $GITHUB_STEP_SUMMARY
        echo "- DO Valkey Host: ${{ env.DO_VALKEY_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "- DO Valkey Port: ${{ env.DO_VALKEY_PORT }}" >> $GITHUB_STEP_SUMMARY

  deploy-frontend:
    name: Deploy Frontend Application
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Pulumi CLI
      uses: pulumi/actions@v4

    - name: Get infrastructure outputs
      working-directory: hosting
      run: |
        pulumi stack select dev
        echo "DROPLET1_IP=$(pulumi stack output droplet1Ip)" >> $GITHUB_ENV
        echo "DROPLET2_IP=$(pulumi stack output droplet2Ip)" >> $GITHUB_ENV
        echo "LB_IP=$(pulumi stack output loadBalancerIp)" >> $GITHUB_ENV
        echo "DOMAIN=$(pulumi stack output domain 2>/dev/null || echo '')" >> $GITHUB_ENV

    - name: Deploy frontend application
      run: |
        echo "## Frontend Deployment Starting" >> $GITHUB_STEP_SUMMARY
        echo "Building and preparing Next.js frontend application..." >> $GITHUB_STEP_SUMMARY

        # Build the Next.js application
        cd frontend
        npm ci
        npm run build

        # Create ecosystem.config.js for PM2
        cat > ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'cgc-frontend',
            script: 'npm',
            args: 'start',
            cwd: '/opt/cgc-frontend/frontend',
            env: {
              NODE_ENV: 'production',
              PORT: 3000
            }
          }]
        }
        EOF

        # Create deployment archive with only existing files
        tar -czf ../frontend-deploy.tar.gz .next package.json package-lock.json ecosystem.config.js
        cd ..

        echo "✅ Frontend application built and packaged" >> $GITHUB_STEP_SUMMARY
        echo "Frontend will be deployed via droplet user-data script" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- Droplet 1 IP: ${{ env.DROPLET1_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- Droplet 2 IP: ${{ env.DROPLET2_IP }}" >> $GITHUB_STEP_SUMMARY
        echo "- Load Balancer IP: ${{ env.LB_IP }}" >> $GITHUB_STEP_SUMMARY

    - name: Deployment summary
      run: |
        echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Access URLs" >> $GITHUB_STEP_SUMMARY
        if [ -n "${{ env.DOMAIN }}" ]; then
          echo "- **Primary Application**: https://${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Alternative (IP)**: http://${{ env.LB_IP }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Primary Application**: http://${{ env.LB_IP }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Health Checks" >> $GITHUB_STEP_SUMMARY
        echo "- Load Balancer Health: Check DigitalOcean dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- Droplets are configured with internal health checks on :8080/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🖥️ Full-Stack Droplets" >> $GITHUB_STEP_SUMMARY
        echo "- **Droplet 1**: ${{ env.DROPLET1_IP }} (runs backend + frontend)" >> $GITHUB_STEP_SUMMARY
        echo "- **Droplet 2**: ${{ env.DROPLET2_IP }} (runs backend + frontend)" >> $GITHUB_STEP_SUMMARY
        echo "- Both droplets behind load balancer for high availability" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Infrastructure" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: Valkey cluster at ${{ env.DO_VALKEY_HOST }}:${{ env.DO_VALKEY_PORT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Storage**: DigitalOcean Spaces bucket '${{ env.DO_SPACES_BUCKET }}'" >> $GITHUB_STEP_SUMMARY
        echo "- **CDN**: Integrated with Spaces for fast image delivery" >> $GITHUB_STEP_SUMMARY
        echo "- **Logs**: Uploaded to Spaces every 5 minutes at s3://${{ env.DO_SPACES_BUCKET }}/logs/" >> $GITHUB_STEP_SUMMARY