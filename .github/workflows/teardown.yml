name: Teardown Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "DESTROY" to confirm teardown'
        required: true
        type: string

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  DIGITALOCEAN_TOKEN: ${{ secrets.DO_ACCESS_TOKEN }}

jobs:
  teardown:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'DESTROY'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: hosting/go.sum

    - name: Setup Pulumi CLI
      uses: pulumi/actions@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_ACCESS_TOKEN }}

    - name: Build infrastructure program
      working-directory: hosting
      run: |
        mkdir -p bin
        go mod download
        go build -o bin/cgc-lb-and-cdn .

    - name: Destroy infrastructure
      working-directory: hosting
      run: |
        pulumi stack select dev
        echo "🗑️ Starting infrastructure teardown..." >> $GITHUB_STEP_SUMMARY

        # Get domain from Pulumi config
        DOMAIN=$(pulumi config get cgc-lb-and-cdn:domain || echo "wheeleraiduel.online")
        echo "📋 Domain: $DOMAIN" >> $GITHUB_STEP_SUMMARY

        # Clean up auto-created DNS records (created by Let's Encrypt validation)
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧹 Cleaning up auto-created DNS records" >> $GITHUB_STEP_SUMMARY

        # Get all A and AAAA records for apex domain
        APEX_A_RECORDS=$(doctl compute domain records list "$DOMAIN" --format ID,Type,Name --no-header | grep -E "^[0-9]+\s+A\s+@" | awk '{print $1}' || true)
        APEX_AAAA_RECORDS=$(doctl compute domain records list "$DOMAIN" --format ID,Type,Name --no-header | grep -E "^[0-9]+\s+AAAA\s+@" | awk '{print $1}' || true)

        # Delete apex A records
        if [ -n "$APEX_A_RECORDS" ]; then
          for record_id in $APEX_A_RECORDS; do
            echo "  🗑️ Deleting A record (ID: $record_id)" >> $GITHUB_STEP_SUMMARY
            doctl compute domain records delete "$DOMAIN" "$record_id" --force || true
          done
        fi

        # Delete apex AAAA records
        if [ -n "$APEX_AAAA_RECORDS" ]; then
          for record_id in $APEX_AAAA_RECORDS; do
            echo "  🗑️ Deleting AAAA record (ID: $record_id)" >> $GITHUB_STEP_SUMMARY
            doctl compute domain records delete "$DOMAIN" "$record_id" --force || true
          done
        fi

        # Try to destroy all resources
        pulumi destroy --yes || true

        # If VPC deletion failed (expected), remove it from state
        if pulumi state delete "urn:pulumi:dev::cgc-lb-and-cdn::digitalocean:index/vpc:Vpc::cgc-lb-and-cdn-vpc" 2>/dev/null; then
          echo "🔧 Removed VPC from Pulumi state (VPC cannot be deleted - this is normal)" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Infrastructure teardown complete!" >> $GITHUB_STEP_SUMMARY
        echo "💰 Monthly cost savings: ~$39/month" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Manual Cleanup (if needed)" >> $GITHUB_STEP_SUMMARY
        echo "- Delete DO Spaces bucket 'cgc-lb-and-cdn-content' if created manually" >> $GITHUB_STEP_SUMMARY
        echo "- VPC remains (cannot be deleted - this is normal and free)" >> $GITHUB_STEP_SUMMARY
        echo "- DNS NS records remain (nameserver records for your domain)" >> $GITHUB_STEP_SUMMARY
        echo "- Remove unused GitHub secrets if desired" >> $GITHUB_STEP_SUMMARY
      env:
        PULUMI_STACK: dev

  teardown-failed:
    name: Teardown Confirmation Required
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm != 'DESTROY'

    steps:
    - name: Confirmation failed
      run: |
        echo "❌ Teardown cancelled - confirmation required" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To destroy infrastructure, type exactly: **DESTROY**" >> $GITHUB_STEP_SUMMARY
        echo "This safety measure prevents accidental deletion." >> $GITHUB_STEP_SUMMARY
        exit 1